// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OddScout.Infrastructure.Data;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250704001739_AddTransactionEntity")]
    partial class AddTransactionEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OddScout.Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ActualReturn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MarketType")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("PlacedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PotentialReturn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SelectedOutcome")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SettledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Bets_EventId");

                    b.HasIndex("PlacedAt")
                        .HasDatabaseName("IX_Bets_PlacedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Bets_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Bets_UserId");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_Bets_User_Status");

                    b.ToTable("Bets", (string)null);
                });

            modelBuilder.Entity("OddScout.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("League")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ScrapedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EventDateTime")
                        .HasDatabaseName("IX_Events_EventDateTime");

                    b.HasIndex("Source")
                        .HasDatabaseName("IX_Events_Source");

                    b.HasIndex("Team1", "Team2", "EventDateTime")
                        .HasDatabaseName("IX_Events_Teams_DateTime");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("OddScout.Domain.Entities.Odd", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DrawOdd")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MarketType")
                        .HasColumnType("int");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<decimal>("Team1Odd")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Team2Odd")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Odds_EventId");

                    b.HasIndex("EventId", "MarketType", "Source")
                        .HasDatabaseName("IX_Odds_Event_Market_Source");

                    b.ToTable("Odds", (string)null);
                });

            modelBuilder.Entity("OddScout.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RelatedEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Transactions_CreatedAt");

                    b.HasIndex("ExternalReference")
                        .HasDatabaseName("IX_Transactions_ExternalReference")
                        .HasFilter("[ExternalReference] IS NOT NULL");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Transactions_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Transactions_Type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Transactions_UserId");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_Transactions_User_Status");

                    b.HasIndex("UserId", "Type")
                        .HasDatabaseName("IX_Transactions_User_Type");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("OddScout.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ValueBet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BetbyOdd")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ConfidenceScore")
                        .HasColumnType("decimal(8,4)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExpectedValue")
                        .HasColumnType("decimal(12,8)");

                    b.Property<decimal>("ImpliedProbability")
                        .HasColumnType("decimal(12,8)");

                    b.Property<int>("MarketType")
                        .HasColumnType("int");

                    b.Property<int>("OutcomeType")
                        .HasColumnType("int");

                    b.Property<decimal>("PinnacleOdd")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CalculatedAt")
                        .HasDatabaseName("IX_ValueBets_CalculatedAt");

                    b.HasIndex("EventId");

                    b.HasIndex("ExpectedValue")
                        .HasDatabaseName("IX_ValueBets_ExpectedValue");

                    b.ToTable("ValueBets", (string)null);
                });

            modelBuilder.Entity("OddScout.Domain.Entities.Bet", b =>
                {
                    b.HasOne("OddScout.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OddScout.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OddScout.Domain.Entities.Odd", b =>
                {
                    b.HasOne("OddScout.Domain.Entities.Event", "Event")
                        .WithMany("Odds")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("OddScout.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("OddScout.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ValueBet", b =>
                {
                    b.HasOne("OddScout.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("OddScout.Domain.Entities.Event", b =>
                {
                    b.Navigation("Odds");
                });
#pragma warning restore 612, 618
        }
    }
}
